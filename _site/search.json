[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ISSS626-GAA",
    "section": "",
    "text": "Welcome to my portfolio for Geospatial Analytics and Applications module in Singapore Management University!\nIn this website, you will find my hands-on exercise, in-class exercise as well as coursework for this course."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html",
    "title": "Hands-on Exercise 1a",
    "section": "",
    "text": "Objective of this exercise:\n\nCreate thematic map, which involve the use of map symbols to visualize geographic features that are not naturally visible (e.g. population,temperature, crime rate, property prices, etc).\nCreate geovisualization, which uses visual representations and cartographic techniques to explore, analyze and communicate geospatial data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#getting-started",
    "title": "Hands-on Exercise 1a",
    "section": "",
    "text": "Objective of this exercise:\n\nCreate thematic map, which involve the use of map symbols to visualize geographic features that are not naturally visible (e.g. population,temperature, crime rate, property prices, etc).\nCreate geovisualization, which uses visual representations and cartographic techniques to explore, analyze and communicate geospatial data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-libraries",
    "title": "Hands-on Exercise 1a",
    "section": "Import Libraries",
    "text": "Import Libraries\n\npacman::p_load(sf, tmap, tidyverse, rvest)\n\nThe libraries used in this exercise would be:\n\ntmap: used to draw thematic map\nreadr: fast way to read rectangular data from delimited files (e.g. csv and tsv)\ntidyr: tool to create tidy data\ndplyr: grammar of data manipulation (to work with data frame like objects)\nsf: simple features in R to encode and analyze spatial vector data\nrvest: help scrape data from web page"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#the-data",
    "title": "Hands-on Exercise 1a",
    "section": "The Data",
    "text": "The Data\nIn this hands-on exercise, we’ll be using the Master PLan 2019 Master Boundary (No Sea) KML file (geospatial data), which consist of the geographical boundary of Singapore at planning subzone area in 2019.\nWe’ll also be using the Singapore Residents by Planning Area/Subzone, Age Group, Sex and Type of Dwelling, June 2024 in csv file (aspatial data). The PA and SZ column can be used to identify to georeference to the Master Plan 2019 Subzone Boundary data."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-data",
    "title": "Hands-on Exercise 1a",
    "section": "Import Data",
    "text": "Import Data\n\nmpsz &lt;- st_read(\"data/MasterPlan2019SubzoneBoundaryNoSeaKML.kml\")\n\nReading layer `URA_MP19_SUBZONE_NO_SEA_PL' from data source \n  `C:\\stefanie-fel\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\MasterPlan2019SubzoneBoundaryNoSeaKML.kml' \n  using driver `KML'\nSimple feature collection with 332 features and 2 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html",
    "title": "Hands-on Exercise 1b",
    "section": "",
    "text": "Objective of this exercise:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data-preparation",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#data-preparation",
    "title": "Hands-on Exercise 1a",
    "section": "Data Preparation",
    "text": "Data Preparation\nFirst we’ll create a function to extract values from HTML description\n\nextract_kml_field &lt;- function(html_text, field_name) {\n  if (is.na(html_text) || html_text == \"\") return(NA_character_)\n  \n  page &lt;- read_html(html_text)\n  rows &lt;- page %&gt;% html_elements(\"tr\")\n  \n  value &lt;- rows %&gt;%\n    keep(~ html_text2(html_element(.x, \"th\")) == field_name) %&gt;%\n    html_element(\"td\") %&gt;%\n    html_text2()\n  \n  if (length(value) == 0) NA_character_ else value\n}\n\n\n\n\n\n\n\nWhat does the code do\n\n\n\n\nThe function checks if html_text is an empty string and returns NA_character_\nIt parses the raw HTML string to HTML document and extract all table row element\nFor each row, it extracts the table row’s text and keeps only rows which table header matches field_name\nThen it returns the text from the table data cell\n\n\n\n\nmpsz &lt;- mpsz %&gt;%\n  mutate(\n    REGION_N = map_chr(Description, extract_kml_field, \"REGION_N\"),\n    PLN_AREA_N = map_chr(Description, extract_kml_field, \"PLN_AREA_N\"),\n    SUBZONE_N = map_chr(Description, extract_kml_field, \"SUBZONE_N\"),\n    SUBZONE_C = map_chr(Description, extract_kml_field, \"SUBZONE_C\")\n  ) %&gt;%\n  select(-Name, -Description) %&gt;%\n  relocate(geometry, .after = last_col())\n\n\n\n\n\n\n\nWhat does the code do\n\n\n\n\nExtracts fields from description column and use extract_kml_fieldto extract data from REGION_N, PLN_AREA_N, SUBZONE_N and SUBZONE_C\nMoves the geometry column to the very end using relocate\n\n\n\n\nmpsz\n\nSimple feature collection with 332 features and 4 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 103.6057 ymin: 1.158699 xmax: 104.0885 ymax: 1.470775\nGeodetic CRS:  WGS 84\nFirst 10 features:\n         REGION_N    PLN_AREA_N           SUBZONE_N SUBZONE_C\n1  CENTRAL REGION   BUKIT MERAH          DEPOT ROAD    BMSZ12\n2  CENTRAL REGION   BUKIT MERAH         BUKIT MERAH    BMSZ02\n3  CENTRAL REGION        OUTRAM           CHINATOWN    OTSZ03\n4  CENTRAL REGION DOWNTOWN CORE             PHILLIP    DTSZ04\n5  CENTRAL REGION DOWNTOWN CORE       RAFFLES PLACE    DTSZ05\n6  CENTRAL REGION        OUTRAM        CHINA SQUARE    OTSZ04\n7  CENTRAL REGION   BUKIT MERAH         TIONG BAHRU    BMSZ10\n8  CENTRAL REGION DOWNTOWN CORE    BAYFRONT SUBZONE    DTSZ12\n9  CENTRAL REGION   BUKIT MERAH TIONG BAHRU STATION    BMSZ04\n10 CENTRAL REGION DOWNTOWN CORE       CLIFFORD PIER    DTSZ06\n                         geometry\n1  MULTIPOLYGON (((103.8145 1....\n2  MULTIPOLYGON (((103.8221 1....\n3  MULTIPOLYGON (((103.8438 1....\n4  MULTIPOLYGON (((103.8496 1....\n5  MULTIPOLYGON (((103.8525 1....\n6  MULTIPOLYGON (((103.8486 1....\n7  MULTIPOLYGON (((103.8311 1....\n8  MULTIPOLYGON (((103.8589 1....\n9  MULTIPOLYGON (((103.8283 1....\n10 MULTIPOLYGON (((103.8552 1...."
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-and-prepare-data-for-the-aspatial-dataset",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#import-and-prepare-data-for-the-aspatial-dataset",
    "title": "Hands-on Exercise 1a",
    "section": "Import and Prepare Data for the Aspatial Dataset",
    "text": "Import and Prepare Data for the Aspatial Dataset\n\npopdata &lt;- read_csv(\"data/respopagesextod2024.csv\")\n\nWe want to prepare a data table with these variables:\n\nYOUNG: Age 0 to 4 - Age 20 to 24\nECONOMY ACTIVE: Age 25 to 29 - Age 60 - 64\nAGED: Age 65 and above\nTOTAL: sum the frequency of Age\nDEPENDENCY: the ratio between young +aged /economy active group\n\nFirst, we’ll use pivot_wide to transform long data format to wide format, whereas mutate(), filter(), group_by() and select() will be used to manipulate and filter data.\n\npopdata2024 &lt;- popdata %&gt;%\n  group_by(PA, SZ, AG) %&gt;%\n  summarise(`POP` = sum(`Pop`)) %&gt;%\n  ungroup()%&gt;%\n  pivot_wider(names_from=AG, \n              values_from=POP) %&gt;%\n  mutate(YOUNG = rowSums(.[3:6])\n         +rowSums(.[12])) %&gt;%\nmutate(`ECONOMY ACTIVE` = rowSums(.[7:11])+\nrowSums(.[13:15]))%&gt;%\nmutate(`AGED`=rowSums(.[16:21])) %&gt;%\nmutate(`TOTAL`=rowSums(.[3:21])) %&gt;%  \nmutate(`DEPENDENCY` = (`YOUNG` + `AGED`)\n/`ECONOMY ACTIVE`) %&gt;%\n  select(`PA`, `SZ`, `YOUNG`, \n       `ECONOMY ACTIVE`, `AGED`, \n       `TOTAL`, `DEPENDENCY`)\n\nBefore performing the geospatial join, we’ll convert values of PA and SZ columns to uppercase, because it’s the column values are a mix of uppercase and lowercase. There will be a mismatch if the format isn’t changed.\n\npopdata2024 &lt;- popdata2024 %&gt;%\n  mutate_at(.vars = vars(PA, SZ), \n          .funs = list(toupper)) %&gt;%\n  filter(`ECONOMY ACTIVE` &gt; 0)\n\nWe’ll use left_join to join both data and attribute table using SUBZONE_N and SZ as common identifier.\n\nmpsz_pop2024 &lt;- left_join(mpsz, popdata2024,\n                          by = c(\"SUBZONE_N\" = \"SZ\"))\n\nNext, we’ll save the R object into file in binary format (RDS) using write_rds\n\nwrite_rds(mpsz_pop2024, \"data/mpszpop2024.rds\")"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#map-choropleth-with-tmap",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01.html#map-choropleth-with-tmap",
    "title": "Hands-on Exercise 1a",
    "section": "Map Choropleth With tmap",
    "text": "Map Choropleth With tmap\nChoropleth map is a type of a thematic map where the areas are shaded to indicate the value of a specific variable (e.g. demographics, economics, health, etc).\nThere are two ways we can create a choropleth map in R:\n\nWe can plot a simple choropleth using qtm()\nWe can also plot customizable thematic map using tmap\n\n\nMap Choropleth with qtm()\n\ntmap_mode(\"plot\")\nqtm(shp = mpsz_pop2024, \n    fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nWhat does this code do:\n\ntmap_mode(plot) is used to produce a static map, we can use tmap_mode(view) for producing interactive map\nfill argument is used to map attribute, in this case DEPENDENCY\n\n\n\nMap Thematic Map using tmap\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                n = 5,\n                values = \"brewer.blues\"),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_title(\"Distribution of Dependency Ratio by planning subzone\") +\n  tm_layout(frame = TRUE) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(alpha =0.2) +\n  tm_credits(\"Source: Planning Sub-zone boundary from Urban Redevelopment Authorithy (URA)\\n and Population data from Department of Statistics DOS\", \n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nWe can draw the choropleth step-by-step by drawing the base map first. We’ll use the tm_shape to define the input data and tm_polygon() to draw the planning subzone polygone. Note that apart from the ones we use above, there are also other functions i.e. tm_symbols, tm_lines, tm_raster() and tm_text().\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons()\n\n\n\n\n\n\n\n\nNext, we’ll add our target variable in the fill argument in the tm_polygon.\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill = \"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThe tm_polygon() is actually a wrapper of tm_fill() and tm_border(). tm_fill() shades the polygon using the color scheme and tm_borders() add border to the polygon, or else it will look like this.\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\")\n\n\n\n\n\n\n\n\nThe tm_borders() has a few argument we can use:\n\nfill_alpha : define level of transparency (0 to 1, where 0 is transparent and 1 is not transparent)\ncol : border color\nlwd : border line width (default: 1)\nlty : border line type (default: solid)\n\nIn this example, we’ll use the col, lwd and lty argument.\n\ntm_shape(mpsz_pop2024)+\n  tm_fill(\"DEPENDENCY\") +\n  tm_borders(col = \"grey60\",\n             lwd = 0.1,\n             lty = \"dashed\")\n\n\n\n\n\n\n\n\n\n\nData Classification of tmap\nChoropleth maps usually use some method of data classification to take number of observations and bin them based on data ranges or classes. Depending on what kind of data classification used, the choropleth map can look different. tmap provides 10 classification methods, such as fixed, sd, equal, pretty (default, quantile, kmeans, hclust, bclust, fisher and jenks.\nIn this example, we’ll use quantile data classification that use 5 classes\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn this example, we’ll use equal data classification\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn this example, we’ll use quantile data classification that use 2 classes.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 2)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nNext, we’ll try the quantile data classification with 6 classes.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 6)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nIn this example, we’ll try quantile data classification using 10 classes\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 10)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nLastly, we’ll compare using 20 classes.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 20)) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nCreate Custom Breakpoints in Chroropleth\nWe can override the default values by using the breaks argument in the tm_scale_intervals() . Note that the breaks include minimum and maximum, so if we have n categories, we must specify n+1 elements in the breaks option (from smallest value to highest value). we can first check the descriptive statistics of the DEPENDENCY field to apply it to our plot.\n\nsummary(mpsz_pop2024$DEPENDENCY)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max.    NA's \n 0.1905  0.7450  0.8377  0.8738  0.9366 12.7500      94 \n\n\nAs can be seen, we can set break point at 0.60, 0.70, 0.80 and 0.90 and include min of 0 and max of 100.\n\ntm_shape(mpsz_pop2024)+\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                breaks = c(0, 0.60, 0.70, 0.80, 0.90, 1.00))) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nColor Scheme in tmap\nColor schemes in tmap are either user defined or using RColorBrewer package.\n\nUsing ColorBrewer Palette\nTo use the ColorBrewer palette, we can specify in the values argument.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nWe can see that it’s shaded in green. But we can also reverse this by adding a “-” prefix in front of the palette.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"-brewer.greens\")) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nCartographic Feature in tmap\nWe can also draw other map furniture (e.g. compass, scale bar and grid lines). In this example, we’ll be using tm_compass(), tm_scale_bar(), tm_grod() and tm_credit() to draw a compass, scale bar, grid lines and data sources to the map.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5)) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: data.gov.sg & singstat\",\n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\n\n\nMap Layout\nMap layout refers to combination of all aethetic map elements to a cohesive map (e.g. background, frame, typography, scale, aspect ratio, etc) using tm_layout(). In this example, we can change teh placement, format and look of the legend.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5),\n              fill.legend = tm_legend(\n                title = \"Dependency ratio\")) +\n  tm_pos_auto_in() +\n  tm_borders(fill_alpha = 0.5) +\n  tm_compass(type=\"8star\", size = 2) +\n  tm_scalebar() +\n  tm_grid(lwd = 0.1, alpha = 0.2) +\n  tm_credits(\"Source: data.gov.sg & singstat\",\n             position = c(\"left\", \"bottom\"))\n\n\n\n\n\n\n\n\nWhile in example, we can change layout settings to be changed using tmap_style() like below.\n\ntm_shape(mpsz_pop2024) +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\",\n                n = 5,\n                values = \"-brewer.greens\")) + \n  tm_borders(fill_alpha = 0.5) + \n  tmap_style(\"natural\")\n\n\n\n\n\n\n\n\n\n\n\nDrawing Small Choropleth Maps\nWe can create multiple small maps or called facet maps to visualize the spatial relationship change with other variables (e.g. time). We can plot them in several ways:\n\nAssigning multiple values to one of the aesthetic arguments\nCreating multiple stand-alone maps with tmap_arrange()\nDefining a group-by variable in tm_facets()\n\nIn this example, we’ll map multiple choropleth map by assigning two variables to the fill variable.\n\ntm_shape(mpsz_pop2024) + \n  tm_polygons(\n    fill = c(\"YOUNG\", \"AGED\"),\n    fill.legend = \n      tm_legend(position = tm_pos_in(\n        \"right\", \"bottom\")),\n    fill.scale = tm_scale_intervals(\n      style = \"equal\", \n      n = 5,\n      values = \"brewer.blues\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tmap_style(\"natural\")\n\n\n\n\n\n\n\n\nNext, we’ll creating multiple choropleth maps using grid layout (tmap_arrange())\n\nyoungmap &lt;- tm_shape(mpsz_pop2024)+ \n  tm_polygons(fill = \"YOUNG\",\n              fill.legend = tm_legend(\n                position = tm_pos_in(\n                  \"right\", \"bottom\"),\n                  item.height = 0.8),\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                values = \"brewer.blues\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of young population\")\n                \nagedmap &lt;- tm_shape(mpsz_pop2024)+ \n  tm_polygons(fill = \"AGED\",\n              fill.legend = tm_legend(\n                position = tm_pos_in(\n                  \"right\", \"bottom\"),\n                item.height = 0.8),\n              fill.scale = tm_scale_intervals(\n              style = \"quantile\", \n              values = \"brewer.blues\")) +\n  tm_borders(fill_alpha = 0.5) +\n  tm_title(\"Distribution of aged population\")\n\ntmap_arrange(youngmap, agedmap, asp=1, ncol=2)\n\n\n\n\n\n\n\n\nLastly, we’ll use tm_facets to define group-by variable.\n\ntm_shape(mpsz_pop2024) +\n  tm_fill(fill = \"DEPENDENCY\",\n          fill.scale = tm_scale_intervals(\n            style = \"quantile\",\n            values = \"brewer.blues\")) + \n  tm_facets(by = \"REGION_N\",\n            nrow = 2, \n            ncols = 3,\n            free.coords=TRUE, \n            drop.units=TRUE) +\n  tm_layout(legend.show = TRUE,\n            title.position = c(\"center\", \"center\"), \n            title.size = 20) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\nWe can also select geographical area of inetrest and plot teh choropleth only on selected region using filter() function\n\nmpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\") %&gt;%\n  tm_shape() +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                values = \"brewer.greens\"),\n              fill.legend = tm_legend()) +\n  tm_borders(fill_alpha = 0.5)\n\n\n\n\n\n\n\n\n\n\nComplementing Thematic Map with Statistical Chart\nMaps and statistical chart complement each other by visually representing different aspects of the same data to provide comprehensive understanding on a certain subject and provide data narrative. With tmap, statistical chart can be added into the map visualization using fill.chat argument of map layer and lend chart.\n\nmpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\") %&gt;%\n  tm_shape() +\n  tm_polygons(fill = \"DEPENDENCY\",\n              fill.scale = tm_scale_intervals(\n                style = \"quantile\", \n                values = \"brewer.greens\"),\n              fill.legend = tm_legend(),\n              fill.chart = tm_chart_box()) +\n  tm_borders() +\n  tm_layout(asp = 0.8)\n\n\n\n\n\n\n\n\nWe can also improve the visual representation by highlighting and labeling the outliers.\n\nmpsz_selected &lt;- mpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\n\nstats &lt;- boxplot.stats(mpsz_selected$DEPENDENCY)\n\noutlier_vals &lt;- stats$out\n\noutlier_sf &lt;- mpsz_selected[mpsz_selected$DEPENDENCY %in% outlier_vals, ]\n\ntm_shape(mpsz_selected) +\n  tm_polygons(fill = \"DEPENDENCY\",\n          fill.scale = tm_scale_intervals(\n            style = \"quantile\", \n            values = \"brewer.blues\"),\n          fill.legend = tm_legend(),\n          fill.chart = tm_chart_box()) +\n  tm_borders(fill_alpha = 0.5) +\ntm_shape(outlier_sf) +\n  tm_borders(col = \"red\", lwd = 2) +\n  tm_text(\"SUBZONE_N\", col = \"red\", size = 0.7) +\n  tm_layout(asp = 0.8)\n\n\n\n\n\n\n\n\n\n\nCreate Interactive Chropleth Map\nWe can also create interactive maps to allow user to interact and engage with the data instead of just looking at the map statically. This can be done in tmap using tmap_mode() like below.\n\nregion_selected &lt;- mpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\nregion_bbox &lt;- st_bbox(region_selected)\n\nstats &lt;- boxplot.stats(region_selected$DEPENDENCY)\noutlier_vals &lt;- stats$out\noutlier_sf &lt;- region_selected[region_selected$DEPENDENCY %in% outlier_vals, ]\n\ntmap_mode(\"view\")\ntm_shape(region_selected, \n         bbox = region_bbox) +\n  tm_fill(\"DEPENDENCY\",\n          id = \"SUBZONE_N\",\n          popup.vars = c(\n            \"Name\" = \"SUBZONE_N\", \n            \"Dependency\" = \"DEPENDENCY\")) +\n  tm_borders() +\n  tm_shape(outlier_sf) +\n  tm_borders(col = \"red\", lwd = 2)\n\n\n\n\n\n\nCurrently the display of the map could distract users from interacting with the data. So let’s use set_zoom_limits argument to limit the map where users can zoom in or out.\n\nregion_selected &lt;- mpsz_pop2024 %&gt;%\n  filter(REGION_N == \"CENTRAL REGION\")\nregion_bbox &lt;- st_bbox(region_selected)\n\nstats &lt;- boxplot.stats(region_selected$DEPENDENCY)\noutlier_vals &lt;- stats$out\noutlier_sf &lt;- region_selected[region_selected$DEPENDENCY %in% outlier_vals, ]\n\ntmap_mode(\"view\")\n\ntm_shape(region_selected, \n         bbox = region_bbox) +\n  tm_fill(\"DEPENDENCY\",\n          id = \"SUBZONE_N\",\n          popup.vars = c(\n            \"Name\" = \"SUBZONE_N\", \n            \"Dependency\" = \"DEPENDENCY\")) +\n  tm_borders() +\n  tm_shape(outlier_sf) +\n  tm_borders(col = \"red\", lwd = 2) +\n  tm_view(set_zoom_limits = c(12,14))"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#getting-started",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#getting-started",
    "title": "Hands-on Exercise 1b",
    "section": "",
    "text": "Objective of this exercise:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#import-libraries",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#import-libraries",
    "title": "Hands-on Exercise 1b",
    "section": "Import Libraries",
    "text": "Import Libraries\nThe libraries used in this exercise would be:"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#the-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#the-data",
    "title": "Hands-on Exercise 1b",
    "section": "The Data",
    "text": "The Data"
  },
  {
    "objectID": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#import-data",
    "href": "Hands-on_Ex/Hands-on_Ex01/Hands-on_Ex01b.html#import-data",
    "title": "Hands-on Exercise 1b",
    "section": "Import Data",
    "text": "Import Data\nData Prep"
  }
]