{
  "hash": "5481cba30235cb5cbd0283bf3c6541ac",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Hands-on Exercise 1b\"\nauthor: \"Stefanie Felicia\"\ndate: \"August 29, 2025\"\ndate-modified: \"last-modified\"\nexecute: \n  eval: true\n  echo: true\n  warning: false\n  freeze: true\n---\n\n## Getting Started\n\nObjective of this exercise is to import, wrangle, integrate and process geospatial data sets using:\n\n-   sf library to import geospatial data\n\n-   readr library to import aspatial data\n\n-   Use Base R adnd sf libraries yto explore contents fof simple feature data frame\n\n-   Use sf library to transform or assign coordinate systems\n\n-   Convert aspatial data into sf data frame and perform geoprocessing tasks using sf library\n\n-   Use dpylr library to do data wrangling\n\n-   Perform EDA using ggplot2\n\n## Import Libraries\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_load(sf, readr, dplyr, tidyr, tidyverse, ggplot2)\n```\n:::\n\n\nThe libraries used in this exercise would be:\n\n-   sf: simple features in R to encode and analyze spatial vector data\n\n-   readr: fast way to read rectangular data from delimited files (e.g. csv and tsv)\n\n-   dplyr: grammar of data manipulation (to work with data frame like objects)\n\n-   tidyverse: collection of R packages that for data manipulation and visualization\n\n-   tidyr: tool to create tidy data\n\n-   ggplot2: create graphics based on \"the Grammar of Objects\"\n\n## The Data\n\nIn this hands-on exercise, we'll be using the following datasets:\n\n-   <a href=\"https://data.gov.sg/datasets/d_d14da225fccf921049ab64238ff473d9/view\">Master Plan 2014 Subzone Boundary (Web)</a>\n\n-   <a href=\"https://data.gov.sg/datasets/d_a72bcd23e208d995f3bd4eececeaca43/view\">Pre-schools Location</a>\n\n-   <a href=\"https://datamall.lta.gov.sg/content/datamall/en/search_datasets.html?searchText=cycling%20path\">Cycling Path</a>\n\n-   <a href=\"https://insideairbnb.com/get-the-data/\">Listing data of Airbnb</a>\n\n## Import Geospatial Data\n\nIn this section, we'll learn to import geosptial data using st_read().\n\n### Import Polygon Data in Shapefile Format\n\nst_read of sf library will be used to import the Master Plan 2014 Subzone Boundary shapefile into R as polygon feature data frame. When importing the data `dsn` argument i sused to define data path and `layer` is used to provide shapefile name without extension.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz = st_read(dsn = \"data/MasterPlan2014SubzoneBoundaryWebSHP\", \n                  layer = \"MP14_SUBZONE_WEB_PL\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `MP14_SUBZONE_WEB_PL' from data source \n  `C:\\stefanie-fel\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\MasterPlan2014SubzoneBoundaryWebSHP' \n  using driver `ESRI Shapefile'\nSimple feature collection with 323 features and 15 fields\nGeometry type: MULTIPOLYGON\nDimension:     XY\nBounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nFrom the message above, it reveals that the geospatial objects are multipolygon features and there are 323 multipolygon features and 15 fieds in the data frame. The data frame is in svy21 projected coordinated systems.\n\n### Import Polyline Data in Shapefile Form\n\nSimilar to importing polygon feature data, we'll be using st_read from sf library to import the dataset to line feature data frame\n\n\n::: {.cell}\n\n```{.r .cell-code}\ncyclingpath = st_read(dsn = \"data/CyclingPath_Apr2025\", \n                         layer = \"CyclingPathGazette\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `CyclingPathGazette' from data source \n  `C:\\stefanie-fel\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\CyclingPath_Apr2025' \n  using driver `ESRI Shapefile'\nSimple feature collection with 4651 features and 19 fields\nGeometry type: MULTILINESTRING\nDimension:     XY\nBounding box:  xmin: 11721.1 ymin: 27550.13 xmax: 42809.37 ymax: 49702.59\nProjected CRS: SVY21\n```\n\n\n:::\n:::\n\n\nThe dataset reveals that there's 4651 features and 19 fields and they are captured in multilinestring object.\n\n### Import GIS Data in KML Format\n\n\n::: {.cell}\n\n```{.r .cell-code}\npreschool = st_read(\"data/PreSchoolsLocation.kml\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nReading layer `PRESCHOOLS_LOCATION' from data source \n  `C:\\stefanie-fel\\ISSS626-GAA\\Hands-on_Ex\\Hands-on_Ex01\\data\\PreSchoolsLocation.kml' \n  using driver `KML'\nSimple feature collection with 2290 features and 2 fields\nGeometry type: POINT\nDimension:     XYZ\nBounding box:  xmin: 103.6878 ymin: 1.247759 xmax: 103.9897 ymax: 1.462134\nz_range:       zmin: 0 zmax: 0\nGeodetic CRS:  WGS 84\n```\n\n\n:::\n:::\n\n\nFrom the import message above, we can see that the dataset is a point feature data frame and there's 2290 features and 2 fields. The dataset is also set in wgs84 coordinate system.\n\n## Check the Content of Simple Feature Data Frame\n\nThere are a few approaches to check the content fo a dataframe, such as:\n\n1.  Using st_geomtery\n\n    Through using st_geometry, we can see the basic information of the feature class (e.g. type of geometry, geographic extent of the features and the coordinate system of the data\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    st_geometry(mpsz)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Geometry set for 323 features \n    Geometry type: MULTIPOLYGON\n    Dimension:     XY\n    Bounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\n    Projected CRS: SVY21\n    First 5 geometries:\n    ```\n    \n    \n    :::\n    :::\n\n\n2.  Use glimpse()\n\n    glimpse() provide basic geospatial feature information as well as associated attribute information in the dataframe like the data type of each fields.\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    st_geometry(mpsz)\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Geometry set for 323 features \n    Geometry type: MULTIPOLYGON\n    Dimension:     XY\n    Bounding box:  xmin: 2667.538 ymin: 15748.72 xmax: 56396.44 ymax: 50256.33\n    Projected CRS: SVY21\n    First 5 geometries:\n    ```\n    \n    \n    :::\n    :::\n\n\n3.  Use head()\n\n    Head() is used to reveal complete information of the feature object and it gives user flexibility whether to show the whole record of the dataframe, or only a few select (through the argument `n`).\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    head(mpsz, n=5)  \n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    Simple feature collection with 5 features and 15 fields\n    Geometry type: MULTIPOLYGON\n    Dimension:     XY\n    Bounding box:  xmin: 25867.68 ymin: 28369.47 xmax: 32362.39 ymax: 30435.54\n    Projected CRS: SVY21\n      OBJECTID SUBZONE_NO      SUBZONE_N SUBZONE_C CA_IND      PLN_AREA_N\n    1        1          1   MARINA SOUTH    MSSZ01      Y    MARINA SOUTH\n    2        2          1   PEARL'S HILL    OTSZ01      Y          OUTRAM\n    3        3          3      BOAT QUAY    SRSZ03      Y SINGAPORE RIVER\n    4        4          8 HENDERSON HILL    BMSZ08      N     BUKIT MERAH\n    5        5          3        REDHILL    BMSZ03      N     BUKIT MERAH\n      PLN_AREA_C       REGION_N REGION_C          INC_CRC FMEL_UPD_D   X_ADDR\n    1         MS CENTRAL REGION       CR 5ED7EB253F99252E 2014-12-05 31595.84\n    2         OT CENTRAL REGION       CR 8C7149B9EB32EEFC 2014-12-05 28679.06\n    3         SR CENTRAL REGION       CR C35FEFF02B13E0E5 2014-12-05 29654.96\n    4         BM CENTRAL REGION       CR 3775D82C5DDBEFBD 2014-12-05 26782.83\n    5         BM CENTRAL REGION       CR 85D9ABEF0A40678F 2014-12-05 26201.96\n        Y_ADDR SHAPE_Leng SHAPE_Area                       geometry\n    1 29220.19   5267.381  1630379.3 MULTIPOLYGON (((31495.56 30...\n    2 29782.05   3506.107   559816.2 MULTIPOLYGON (((29092.28 30...\n    3 29974.66   1740.926   160807.5 MULTIPOLYGON (((29932.33 29...\n    4 29933.77   3313.625   595428.9 MULTIPOLYGON (((27131.28 30...\n    5 30005.70   2825.594   387429.4 MULTIPOLYGON (((26451.03 30...\n    ```\n    \n    \n    :::\n    :::\n\n\n## Plotting Geospatial Data\n\nIn geospatial data science, it's important to be able to visualize the geospatial feature as we're working with maps and location which is difficult to understand without looking at it visually. We can plot in R like below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz)\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\nBut if we just want to show the map as it is, we can use st_geometry().\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(st_geometry(mpsz))\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-9-1.png){width=672}\n:::\n:::\n\n\nWe can also choose the plot we want to display by specifying the attribute like below.\n\n\n::: {.cell}\n\n```{.r .cell-code}\nplot(mpsz[\"PLN_AREA_N\"])\n```\n\n::: {.cell-output-display}\n![](Hands-on_Ex01b_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\n### Working with Projection\n\nTo perform geoprocessing using geospatial datasets, we need to ensure that geospatial datasets are projected using similar coordinate system or known as projection transformation.\n\n#### Assign ESPG code to simple feature data frame\n\nWhen importing geospatial data is that coordinate system of source data was missing or wrongly assigned during importing process. We can check coordinate system of a dataframe using st_crs()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: SVY21 \n  wkt:\nPROJCRS[\"SVY21\",\n    BASEGEOGCRS[\"SVY21[WGS84]\",\n        DATUM[\"World Geodetic System 1984\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]],\n            ID[\"EPSG\",6326]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"Degree\",0.0174532925199433]]],\n    CONVERSION[\"unnamed\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"Degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"(E)\",east,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]],\n        AXIS[\"(N)\",north,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1,\n                ID[\"EPSG\",9001]]]]\n```\n\n\n:::\n:::\n\n\nAs can be seen at the end of the message, the EPSG code is 9001, which is not the EPSG code for svy21. So we can reset by using the st_set_crs()\n\n\n::: {.cell}\n\n```{.r .cell-code}\nmpsz <- st_set_crs(mpsz,3414)\n```\n:::\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nst_crs(mpsz)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:3414 \n  wkt:\nPROJCRS[\"SVY21 / Singapore TM\",\n    BASEGEOGCRS[\"SVY21\",\n        DATUM[\"SVY21\",\n            ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n                LENGTHUNIT[\"metre\",1]]],\n        PRIMEM[\"Greenwich\",0,\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        ID[\"EPSG\",4757]],\n    CONVERSION[\"Singapore Transverse Mercator\",\n        METHOD[\"Transverse Mercator\",\n            ID[\"EPSG\",9807]],\n        PARAMETER[\"Latitude of natural origin\",1.36666666666667,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8801]],\n        PARAMETER[\"Longitude of natural origin\",103.833333333333,\n            ANGLEUNIT[\"degree\",0.0174532925199433],\n            ID[\"EPSG\",8802]],\n        PARAMETER[\"Scale factor at natural origin\",1,\n            SCALEUNIT[\"unity\",1],\n            ID[\"EPSG\",8805]],\n        PARAMETER[\"False easting\",28001.642,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8806]],\n        PARAMETER[\"False northing\",38744.572,\n            LENGTHUNIT[\"metre\",1],\n            ID[\"EPSG\",8807]]],\n    CS[Cartesian,2],\n        AXIS[\"northing (N)\",north,\n            ORDER[1],\n            LENGTHUNIT[\"metre\",1]],\n        AXIS[\"easting (E)\",east,\n            ORDER[2],\n            LENGTHUNIT[\"metre\",1]],\n    USAGE[\n        SCOPE[\"Cadastre, engineering survey, topographic mapping.\"],\n        AREA[\"Singapore - onshore and offshore.\"],\n        BBOX[1.13,103.59,1.47,104.07]],\n    ID[\"EPSG\",3414]]\n```\n\n\n:::\n:::\n\n",
    "supporting": [
      "Hands-on_Ex01b_files"
    ],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}